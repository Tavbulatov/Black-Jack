# frozen_string_literal: true
# Есть игрок (пользователь) и дилер (управляется программой).
# Вначале, запрашиваем у пользователя имя после чего, начинается игра.
# При начале игры у пользователя и дилера в банке находится 100 долларов
# Пользователю выдаются случайные 2 карты, которые он видит (карты указываем условными обозначениями, например, «К+» - король крестей, «К<3» - король черв, «К^» - король пик, «К<>» - король бубен и т.д. При желании, можете использовать символы юникода для мастей.)
# Также 2 случайные карты выдаются «дилеру», против которого играет пользователь. Пользователь не видит карты дилера, вместо них показываются звездочки.
# Пользователь видит сумму своих очков. Сумма считается так: от 2 до 10 - по номиналу карты, все «картинки» - по 10, туз - 1 или 11, в зависимости от того, какое значение будет ближе к 21 и что не ведет к проигрышу (сумме более 21).
# После раздачи, автоматически делается ставка в банк игры в размере 10 долларов от игрока и диллера. (У игрока и дилера вычитается 10 из банка)
#  После этого ход переходит пользователю. У пользователя есть на выбор 3 варианта:
#              - Пропустить. В этом случае, ход переходит к дилеру (см. ниже)
#              - Добавить карту. (только если у пользователя на руках 2 карты). В этом случае игроку добавляется еще одна случайная карта, сумма очков пересчитывается, ход переходит дилеру. Может быть добавлена только одна карта.
#              - Открыть карты. Открываются карты дилера и игрока, игрок видит сумму очков дилера, идет подсчет результатов игры (см. ниже).
#  Ход дилера (управляется программой, цель - выиграть, т.е набрать сумму очком, максимально близкую к 21). Дилер может:
#              - Пропустить ход (если очков у дилера 17 или более). Ход переходит игроку.
#              - Добавить карту (если очков менее 17). У дилера появляется новая карта (для пользователя закрыта). После этого ход переходит игроку. Может быть добавлена только одна карта.
#   Игроки вскрывают карты либо по достижению у них по 3 карты (автоматически), либо когда пользователь выберет вариант «Открыть карты». После этого пользователь видит карты дилера и сумму его очков, а также результат игры (кто выиграл и кто проиграл).
# Подсчет результатов:
#              - Выигрывает игрок, у которого сумма очков ближе к 21
#              - Если у игрока сумма очков больше 21, то он проиграл
#              - Если сумма очков у игрока и дилера одинаковая, то объявляется ничья и деньги из банка возвращаются игрокам
#              - Сумма из банка игры переходит к выигравшему
# После окончания игры, спрашиваем у пользователя, хочет ли он сыграть еще раз. Если да, то игра начинается заново с раздачи карт, если нет - то завершаем работу.
class Controller
  attr_accessor :ante

  CARDS = { '2+' => 2, '3+' => 3, '4+' => 4, '5+' => 5, '6+' => 6, '7+' => 7, '8+' => 8, '9+' => 9, '10+' => 10,
            'K+' => 10, 'Q+' => 10, 'J+' => 10, 'A+' => 1, '2<3' => 2, '3<3' => 3, '4<3' => 4, '5<3' => 5, '6<3' => 6,
            '7<3' => 7, '8<3' => 8, '9<3' => 9, '10<3' => 10, 'K<3' => 10, 'Q<3' => 10, 'J<3' => 10, 'A<3' => 1,
            '2<>' => 2, '3<>' => 3, '4<>' => 4, '5<>' => 5, '6<>' => 6, '7<>' => 7, '8<>' => 8, '9<>' => 9, '10<>' => 10,
            'K<>' => 10, 'Q<>' => 10, 'J<>' => 10, 'A<>' => 1, '2^' => 2, '3^' => 3, '4^' => 4, '5^' => 5, '6^' => 6,
            '7^' => 7, '8^' => 8, '9^' => 9, '10^' => 10, 'K^' => 10, 'Q^' => 10, 'J^' => 10, 'A^' => 1
          }

  def initialize(name)
    @ante = 0
    @player = Player.new(name)
    @dealer = Dealer.new
  end

  def correct
    CARDS['A+'] = 11 if @player.poits <= 10 && @dealer.poits <= 10
    CARDS['A<>'] = 11 if @player.poits <= 10 && @dealer.poits <= 10
    CARDS['A<3'] = 11 if @player.poits <= 10 && @dealer.poits <= 10
    CARDS['A^'] = 11 if @player.poits <= 10 && @dealer.poits <= 10
  end

  def start_game
    reset
    @ante = 20
    @player.random_cards
    @dealer.random_cards
    @player.wager_money
    @dealer.wager_money
    @player.cards_hands
    puts '------------------'
    @dealer.cards_hands

    loop do
      puts 'ВЫБЕРИТЕ ХОД: 1-Пропустить, 2-Добавить карту, 3-Открыть карты'
      choise = gets.chomp.downcase.to_s
      case choise
      when '1'
        add_card
        @player.cards_hands
        @dealer.cards_hands
      when '2'
        puts '+ ## ИГРОК ВЗЯЛ КАРТУ ## + '
        @player.random_cards(1)
        add_card if @player.poits <= 21
      when '3'
        count_results
      when 'да'
        start_game
      when 'нет'
        break
      end
      correct

      if @player.rand_cards.flatten.size == 3 && @dealer.rand_cards.flatten.size == 3
        count_results
      elsif @player.poits > 21
        puts '+ ## ИГРОК ПРОИГРАЛ ## +'
        show_cards
      elsif @dealer.poits > 21
        puts '+ ## ДИЛЛЕР ПРОИГРАЛ ## +'
        show_cards
      end
    end
  end

  def count_results
    if @player.poits == @dealer.poits
      puts '+ ## НИЧЬЯ ## +'
      show_cards
      reset
    elsif @player.poits > @dealer.poits && @player.poits <= 21
      puts '=================='
      puts '+ ## ИГРОК ВЫИГРАЛ ## +'
      show_cards
    elsif @dealer.poits > @player.poits && @dealer.poits <= 21
      puts '=================='
      puts '+ ## ДИЛЛЕР ВЫИГРАЛ ## +'
      show_cards
    end
  end

  def show_cards
    @player.cards_hands
    puts '------------------'
    @dealer.open_cards
    puts '+ ## ХОТИТЕ СЫГРАТЬ ЕЩЕ? ДА/НЕТ ## +'
  end

  def add_card
    puts '+ ## ДИЛЛЕР ВЗЯЛ КАРТУ ## +' if @dealer.poits < 17
    puts '+ ## ДИЛЛЕР ПРОПУСТИЛ ХОД ## +' if @dealer.poits > 17
    puts '+ ## ХОД ПЕРЕХОДИТ К ИГРОКУ ## +'
    @dealer.random_cards(1) if @dealer.poits < 17
  end

  def reset
    @ante = 0
    @player.random_cards
    @dealer.random_cards
    @player.return_money
    @dealer.return_money
    @player.rand_cards.clear
    @dealer.rand_cards.clear
  end
end
